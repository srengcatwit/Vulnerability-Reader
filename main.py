import sys
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QVBoxLayout, QWidget, QPushButton, QFileDialog,
    QTableWidget, QTableWidgetItem, QMessageBox, QHeaderView, QLabel, QHBoxLayout, QTextEdit
)
from PyQt5.QtGui import QFontMetrics, QFont
from PyQt5.QtCore import Qt

from backend import read_csv, validate_data

class VulnerabilityApp(QMainWindow):
    def __init__(self):
        super().__init__()
        self.df = None
        self.initUI()

    def initUI(self):
        self.setWindowTitle("Vulnerability Reader")
        self.setGeometry(100, 100, 1600, 800)  # Adjusted the window size to accommodate wider columns
        
        main_layout = QVBoxLayout()
        
        title_label = QLabel('Vulnerability Reader')
        title_label.setAlignment(Qt.AlignCenter)
        title_font = QFont()
        title_font.setPointSize(30)
        title_font.setBold(True)
        title_label.setFont(title_font)
        main_layout.addWidget(title_label)
        
        self.upload_button = QPushButton('Upload CSV', self)
        self.upload_button.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                border: none;
                padding: 10px 20px;
                text-align: center;
                text-decoration: none;
                display: inline-block;
                font-size: 16px;
                margin: 4px 2px;
                transition-duration: 0.4s;
                cursor: pointer;
            }
            QPushButton:hover {
                background-color: white;
                color: black;
                border: 2px solid #4CAF50;
            }
        """)
        self.upload_button.clicked.connect(self.upload_file)
        main_layout.addWidget(self.upload_button, alignment=Qt.AlignCenter)
        
        self.table_widget = QTableWidget()
        self.table_widget.setHorizontalScrollMode(QTableWidget.ScrollPerPixel)
        self.table_widget.horizontalHeader().setDefaultAlignment(Qt.AlignLeft | Qt.AlignVCenter)
        main_layout.addWidget(self.table_widget)
        
        container = QWidget()
        container.setLayout(main_layout)
        
        self.setCentralWidget(container)

    def upload_file(self):
        options = QFileDialog.Options()
        file_path, _ = QFileDialog.getOpenFileName(self, "Open CSV File", "", "CSV Files (*.csv);;All Files (*)", options=options)
        if file_path:
            try:
                self.df = read_csv(file_path)
                validate_data(self.df)
                self.display_results()
            except Exception as e:
                QMessageBox.critical(self, "Error", str(e))

    def display_results(self):
        self.table_widget.setRowCount(self.df.shape[0])
        self.table_widget.setColumnCount(self.df.shape[1])
        self.table_widget.setHorizontalHeaderLabels(self.df.columns)
        
        for row in range(self.df.shape[0]):
            for col in range(self.df.shape[1]):
                if self.df.columns[col] == 'Description' or self.df.columns[col] == 'Related Software':
                    text_edit = QTextEdit()
                    text_edit.setText(str(self.df.iat[row, col]))
                    text_edit.setReadOnly(True)
                    text_edit.setWordWrapMode(3)  # QTextOption.WrapAtWordBoundaryOrAnywhere
                    self.table_widget.setCellWidget(row, col, text_edit)
                else:
                    item = QTableWidgetItem(str(self.df.iat[row, col]))
                    item.setTextAlignment(Qt.AlignLeft | Qt.AlignTop)
                    item.setFlags(item.flags() ^ Qt.ItemIsEditable)
                    self.table_widget.setItem(row, col, item)
        
        self.table_widget.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeToContents)
        self.table_widget.horizontalHeader().setStretchLastSection(True)
        
        # Set fixed width for columns with long text
        for col in ['Description', 'Related Software']:
            if col in self.df.columns:
                col_index = self.df.columns.get_loc(col)
                self.table_widget.setColumnWidth(col_index, 800)  # Increased column width to 800
        
        # Adjust column widths based on content
        self.adjust_column_widths()

    def adjust_column_widths(self):
        font_metrics = QFontMetrics(self.font())
        for col in range(self.df.shape[1]):
            max_width = 0
            for row in range(self.df.shape[0]):
                width = font_metrics.width(str(self.df.iat[row, col]))
                if width > max_width:
                    max_width = width
            self.table_widget.setColumnWidth(col, max_width + 20)

if __name__ == "__main__":
    app = QApplication(sys.argv)
    ex = VulnerabilityApp()
    ex.show()
    sys.exit(app.exec_())
